{
    "openapi": "3.0.2",
    "info": {
        "title": "Plateng User Data Service",
        "description": "API contract for managing Plateng users", 
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Ronin Internal (Developer Experience Team)",
            "email": "developer-experience@projectronin.com",
            "url": "https://github.com/projectronin/plateng-user-data-service"
        },
        "version": "1.0.17"
    },
    "servers": [
        {
            "url": "/api/v1"
        }
    ],
    "tags": [
        {
            "name": "user",
            "description": "User for interacting with PlatEng services"
        },
        {
            "name": "token",
            "description": "Machine token for obtaining encrypted credentials",
        },
    ],
    "paths": {
        "/users": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create a new user",
                "description": "Create a new user with username and password",
                "operationId": "createUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                /* TODO: Create schema */
                                "$ref": "schemas/user.json#/components/schemas/CreateUserRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successfully created User.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    /* TODO: Create schema */
                                    "$ref": "schemas/user.json#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Most likely no token sent. See response for details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "schemas/common-types.json#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. Authentication information sent does not allow caller to do this.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "schemas/common-types.json#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict. An active user with this name already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "schemas/common-types.json#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Content. Request body contained invalid or malformed data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "schemas/common-types.json#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "seki": [
                            
                        ]
                    }
                ]
            }
        }
    },

    "components": {
        "securitySchemes": {
            "securitySchemes": {
                "seki": {
                    "type": "http",
                    "scheme": "bearer",
                    "bearerFormat": "JWT"
                }
            }
        }
    }
}
